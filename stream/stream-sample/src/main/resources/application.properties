spring.application.name=stream-sample
server.port=63000

# RabbitMQ?????
spring.rabbitmq.host=192.168.110.129
spring.rabbitmq.port=5673
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
spring.rabbitmq.listener.simple.acknowledge-mode=manual

# kafka
#spring.cloud.stream.kafka.binder.brokers:${kafka.brokers:192.168.110.128:9092}
#spring.kafka.bootstrap-server=192.168.110.128:9092
#spring.kafka.producer.retries=0

management.security.enabled=false
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

# ??Channel?broadcast
spring.cloud.stream.bindings.myTopic-consumer.destination=broadcast
spring.cloud.stream.bindings.myTopic-producer.destination=broadcast

# ??????
spring.cloud.stream.bindings.group-consumer.destination=group-topic
spring.cloud.stream.bindings.group-producer.destination=group-topic
spring.cloud.stream.bindings.group-consumer.group=Group-A

# ??????
spring.cloud.stream.bindings.delayed-consumer.destination=delayed-topic
spring.cloud.stream.bindings.delayed-producer.destination=delayed-topic
#spring.cloud.stream.rabbit.bindings.delayed-producer.producer.delayed-exchange=true

# ????(?????)
spring.cloud.stream.bindings.error-consumer.destination=error-topic
spring.cloud.stream.bindings.error-producer.destination=error-topic
# ????(????) ??=1??????
spring.cloud.stream.bindings.error-consumer.consumer.max-attempts=2

# error message(requeue retry)
spring.cloud.stream.bindings.requeue-consumer.destination=requeue-topic
spring.cloud.stream.bindings.requeue-producer.destination=requeue-topic
# must set max-attempts 1, or else requeue not enable
spring.cloud.stream.bindings.requeue-consumer.consumer.max-attempts=1
spring.cloud.stream.bindings.requeue-consumer.group=requeue-group
# only for requeue-consumer, enable requeue
spring.cloud.stream.rabbit.bindings.requeue-consumer.consumer.requeueRejected=true

# default global enable requeue
#spring.rabbitmq.listener.default-requeue-rejected=true

# deal letter queue configuration
spring.cloud.stream.bindings.dlq-consumer.destination=dlq-topic
spring.cloud.stream.bindings.dlq-producer.destination=dlq-topic
spring.cloud.stream.bindings.dlq-consumer.consumer.max-attempts=2
spring.cloud.stream.bindings.dlq-consumer.group=dlq-group
# enable deal letter queue(default topic.dlq)
spring.cloud.stream.rabbit.bindings.dlq-consumer.consumer.auto-bind-dlq=true

# fallback configuration
spring.cloud.stream.bindings.fallback-consumer.destination=fallback-topic
spring.cloud.stream.bindings.fallback-producer.destination=fallback-topic
spring.cloud.stream.bindings.fallback-consumer.consumer.max-attempts=2
spring.cloud.stream.bindings.fallback-consumer.group=fallback-group
# input channel -> fallback-topic.fallback-group.errors

# ??????
# ????????????
spring.cloud.stream.bindings.group-consumer.consumer.partitioned=true
# ??????
spring.cloud.stream.bindings.group-consumer.producer.partition-count=2
# SpEL(Key resolver)
# ???????1???(???)??????
spring.cloud.stream.bindings.group-consumer.producer.partition-key-expression=1
# ?????????
spring.cloud.stream.instanceCount=2
# ???instanceCount-1 ????????
spring.cloud.stream.instanceIndex=2